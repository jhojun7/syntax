CSS란?
    Cascading Style Sheets
    계단식 , 멋을내다 , 종이

#기본 문법
    선택자 : 어떤 요소에 스타일을 적용 할지에 대한 정보 <예시. p캐그에 스타일을 적용>
    {중괄호} : 선택한 요소에 적용할 스타일을 정의햐는 영역
    속성명 : 어떤 스타일을 정의하고 싶은지에 대한 정보 (색상, 크기 등)
    속성값 : 어떻게 정의하고 싶은지에 대한 정보
    /예시
        p{color: red;}

#주석
    /* 주석 */

인라인 스타일
    태그에 스타일 속성을 추가하여 요소에 직접적으로 스타일을 정의하는 방식.
    선택자는 불필요
    웹콘텐츠와 스타일시트를 분리하기 위해서는 사용하지 않는편이 좋다.

#스타일 태그
    HTML문서에 <stlye></style> 태그를 추가하여 그안에 CSS코드를 작성할수 있다.

#문서간의 연결
    확장자가 *.css 인 스타일시트 파일을 HTML문서에 연결 <link> 태그를 사용
    /예시
        <link href=".style.css" rel="styleshhet">
        href : 연결하고자 하는 외부 소스의 url을 기술하는 속성
        rel : 현재 문서와 외부 소스의 연관 관계를 기술하는 속성
    * <link> 태그는 HTML 문서의 <head></head> 내부에서 사용해야 한다.

#선택자
    #기본선택자
        전체선택자
            모든 요소를 선택
            * 는 문서 내 모든 요소를 지정
        태그선택자
            주어진 이름을 가진 요소를 선택 '유형선택자' 라고도 한다
        클래스선택자
            주어진 클래스 속성값을 가진 요소를 선택, 다수일 경우 모두 선택
            앞에 '.' 을 붙여줘야 클래스를 선택하겠다라는 의미
        아이디선택자
            주어진 아이디 속성값을 가진 요소를 선택
            id는 고유한 식별자 역할을 하는 전역속성이므로 다수 선택이 안됨
            앞에 '#' 을 붙여 줘야함
    /예시
        .text{
            color: black;
        }
    #그룹선택자
        다영한 유형의 요소를 한꺼번에 선택하고자 할때 사용
        , 쉼표를 이용해 선택자를 그룹화 한다

    선택자가 겹치는 경우, 기본적으로 나중에 작성된 스타일이 적용
    선택자가 다르지만 요소가 겹치는 경우에는 아이디선택자 > 클랙스 선탤자 > 태그선택자 순으로 적용

    #특성선택자 (속성선택자)
        주어진 속성의 존재 여부나 그 값에 따라 요소를 선택
        /예시
            [class]{color:red;} * 클래스라는 속성을 가지고만 있으면 그 요소들의 색을 바꿈
            [class *="it"]{color:white;} * 클래스 값에 it 라는 문자가 포함되는 요소를 선택
            [class ^="it"]{color:white;} * 클래스 값이 it 라는 문자로 시작하는 요소를 선택
            [class $="it"]{color:white;} * 클래스 값이 it 라는 문자로 끝나는 요소를 선택
    #결합선택자
        두개 이상의 선택자를 결합하여 결한됩 조건을 만족하는 요소를 선택
            자손 결합자
                두개의 선택자 중 첫번째 선택자 요소의 자손을 선택
                /예시
                    div p{color:white;}
                    * div요소 안에 위치하는 모든 p 요소를 선택
                    div > p{color:white;}
                    * div요소 바로 아래에 위치하는 모든 p요소를 선택
            형제 결합자
                두개의 선택자 중 첫번째 선택자 요소의 형제를 선택
                /예시
                    h1 ~ p{color: red;}
                    * h1요소의 뒤에 오는 형제 중 모든 p 요소를 선택
                    h1 + p{color: red;}
                    * h1요소의 바로 뒤에 오는 형제 p 요소를 선택
    

        


#텍스트 관련 속성
    #font-family
        요소를 구성하는 텍스트의 글꼴을 정의. 글꼴명을 속성값으로 지정
        /예시
            *{font-family: 굴림, serif, monospace;}
    #font-size
        수치와 단위를 지정해 글자의 크기를 정의
            px - 모니터 상의 화소 하나 크기에 대응하는 절대적 크기
            rem - html태그의 폰트사이즈에 대응하는 상대적 크기
            em - 부모태그의 폰트사이즈에 대응하는 상대적 크기가
        /예시
            span{fonrt-size:16px;}
            span{fonrt-size:2rem;}
            span{fonrt-size:1.5em;}
    #text-align
        블록 내에서 텍스트의 정렬 방식을 정의
            left / right - 왼쪽 또는 오른쪽 정렬
            center - 가운데 정렬
            justify - 양끝 정렬
        /예시
            p{text-align: right;}

    #color
         텍스트의 색상을 정의
            키워드 - 미리 정의된 색상별 키워드 사용 (red, orange ...)
            RGB 색상코드 - '#' + 6자리 16진수 값 형태로 지정
            RGB 함수 - Red, Green, Blue 의 수준을 각각 정의해 지정
        /예시
            span{color:red;}
            span{color:#FF0000;}
            span{color:rgb(100%, 0%, 0%);}

#블랙레벨 요소
    자기가 속한 영역의 너비를 모두 차지하여 블록을 형성
        (div, p, hi ...)

#인라인 요소
    자기에게 필요한 만큼의 공간만 차지하여
        (span, a ...)

#display 속성
    display 속성은 요소를 블럭과 인라인 요소 중 어느쪽으로 처리할지를 정의
        /예시
            div{display: inline;} * 블록요소인 div 를 인라인요소로 변경
            a{display: block;} * 인라인요소인 a 를 블록요소로 변경

#border 속성
    단축속성.
    테두리를 그리는 속성
    border-color, border-width, border-style ...
    /예시
        div{border: 3px solid red;}
        span{borber-width: 1px;
        border-style: dashed;
        border-color: orange;}

#Box-model 박스모델
    브라우저가 요소를 렌더링 할 때, 각각의 요소는 기본적으로 사각형 형태로 영역을 차지. 이 영역을 박스라고 표현
    CSS는 박스의 크기, 위치, 속성(색,배경,테두리모양...)을 결정할수 있다
    박스는 4개의 영역으로 구성
        콘텐츠영역 - width, height
        안쪽여백 - padding
        경계선(테두리) - margin
        바깥쪽여백 - borber-width
    박스모델에 너비와 높이를 지정하면, 콘텐츠 영역의 크기가 결정된다
    box-sizing 속성은 너비와 높이가 포함할 영역을 변경함으로써 너비와 높이의 계산 방법을 결정 할 수 있다.

    background는 콘텐츠의 배경을 정의
        background-color : 배경 색을 정의
        background-image : 배경 이미지를 정의
        background-position : 배경 이미지의 초기 위치를 정의
        background-repeat : 배경 이미지의 반복 방법을 정의
        background-size : 배경 이미지의 크기를 정의
    더 많은 정보는
    https://developer.mozilla.org/ko/docs/Web/CSS/background

#float 속성
    요소가 문서의 일반적인 흐름에서 제외되어 자신을 포함하고 있는 컨테이너의 왼쪽이나 오른쪽에 배치한다.
        none : 기본값, 원래 상태
        left : 자신을 포함하고 있는 박스의 왼편에 떠 있어야 함
        right : 자신을 포함하고 있는 박스의 오른편에 떠 있어야 함수
    * 문서의 흐름에선 제외되지만, 필요한 만큼의 공간은 차지한다.

#clear 속성
    float요소 이후에 표시되는 요소가 float을 해제(clear)하여 float 요소의 아래로 내려가게 할 수 있다.
        none : 기본값, 아래로 이동되지 않음을 나타내는 키워드
        left : float이 left인 요소의 아래로 내려가겠다
        right : float이 right인 요소의 아래로 내려가겠다
        both : float이 left 및 right인 요소의 아래로 내려가겠다
    * clear: both;를 사용하면 한방에 해결

#position
    문서 상에 요소를 배치하는 방법을 정의
    position이 요소의 배치 방법을 결정하면, top, bottom, left, right가 최종 위치를 결정하는 방식
        position: 난 이렇게 배치할거야
        top: 윗면에서부터 얼만큼 떨어트릴거야
        right: 오른쪽면에서부터 얼만큼 떨어트릴거야 
        bottom: 아랫면에서부터 얼만큼 떨어트릴거야
        left: 왼쪽면에서부터 얼만큼 떨어트릴거야
    /속성값
        static : 기본값, 요소를 일반적인 문서 흐름에 따라 배치
        relative : 일반적인 문서 흐름에 따라 배치하되, 상하좌우 위치값에 따라 오프셋을 적용 (자기의 원래 위치에서 오프셋적용)
        absolute : 일반적인 문서 흐름에서 제거하고, 가장 가까운 position 지정 요소에 대해 상대적으로 오프셋을 적용 
        fixed : 일반적인 문서 흐름에서 제거하고, 지정한 위치에 고정 (스크롤 이동에도 움직이지 않음)
        sticky : 일반적인 문서 흐름에서 제거하고, 스크롤 동작이 존재하는 가장 가까운 요소에 대해 오프셋을 적용
    
#flexbox
    박스 내 요소 간의 공간 배분과 정렬 기능을 제공하기 위한 1차원 레이아웃 모델
    레이아웃을 다룰 때 한 번에 하나의 차원(행이나 열)만을 다룬다는 특성이 있음
    flex컨테이너 라고도 한다
    flex컨테이너를 만들기 위해서는 컨테이너에 display:flex;를 적용해야한다.

    flex-dirction 속성
        flexbox 내 요소를 배치할 때 사용할 주축 및 방향(정방향, 역방향)을 지정한다.
            row : 기본값, 주축은 행이고 방향은 콘텐츠의 방향과 동일
            row-reverse : 주축을 행이고 방향은 콘텐츠의 방향과 반대
            column : 주축은 열이고 방향은 콘텐츠의 방향과 동일
            column-reverse : 주축은 열이고 방향은 콘텐츠의 방향과 반대
    
    justify-content : 주축 배치 방법
        flex-start; 앞쪽에다 배치
        center; 가운데 정렬
        flex-end; 끝쪽에 정렬
        space-around; 주축에서 요소들간의 여백들 동일하게 맞추며 정렬
        space-between; 양쪽은 붙혀놓고 나머지들의 간격을 동일하게 맞추며 정렬
    align-items : 교차축 배치 방법
        flex-start;
        center;
        flex-end;
    align-self : 교차축 개별요소 하나하나 배치 방법
    flex-wrap : 개별 요소들의 도합 크기가 컨테이너 주축 길이보다 커졌을때의 처리 방법 및 방향을 정의 (줄바꿈)
        wrap; 가득 차면 줄바꿈

#의사클래스 (가상클래스)
    선택자에 추가하는 키워드로, 요소가 어떤 특정한 상태가 되었을 때 요소를 선택하겠다는 의미한다
    hover : 마우스 포인터가 요소에 올라가 있다
    active : 사용자가 요소를 활성화했다. (마우스로 누르기와 같은)
        /예시
            [type="button"]:hover{color:white;}
            [type="button"]:active{color:black;}
            * button타입의 요소에 마우스 커서가 올라오면(hover) 글자를 흰색으로, 눌르면(active) 검정색으로 하겠다.
    focus : 요소가 포커스를 받고있다.
    disabled : 비활성 상태의 요소이다.
    nth-child : 형제 사이에서의 순서에 따라 요소를 선택한다.
        /예시
            .box:nth-child(2n){background-color: orange;}
            * box인 클래스들중 짝수번째(2n) 애들만 상자의 색깔을 오렌지로 바꾼다.
    
#의사요소
    선택한 요소의 특정 부분에 대한 스타일을 정의
    다양한 요소들 링크
        https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements

    first-line : 첫번째 줄만 스타일
    firsr-letter : 첫번째 글자만 스타일
        /예시
            p::first-line{color:red;}
            p::first-lettet{color:blue;}
            * 첫번째 글자는 파란색으로, 첫번째 줄의 맨 앞글자를 빼고는 다 빨간색으로 (앞글자는 파란색으로 적용되기때문)
    marker : 목록 지호의 스타일을 적용 (list)
        /예시
            li::marker{color:red; fontsize:60px;}
            * 리스트의 쩜박이 마커를 빨간색, 60픽셀로
    placeholder : 입력 요소의 플레이스홀더 스타일을 적용
        /예시
            input::placeholder{color:red; fontsize:12px;}
    befort : 요소의 앞에 의사 요소를 생성 및 추가
    after : 요소의 뒤에 의사 요소를 생성 및 추가
        /예시
            p::before{content:"앞추가텍스트";color:green;}
            p::after{content:"뒷추가텍스트";font-weight: 500;}
            * 본문 내용 앞에 초록색의 "앞추가텍스트" 가 붙고, 뒤에 두꺼운 "뒷추가텍스트" 를 붙임

#상속
    하위요소가 상위요소의 스타일 속성값을 물려받음
    /예시
        ul{color:tomato;}
        * li요소를 선택하지 않았으나 ul의 색깔이 반영됨
    상속되는 속성
        color, font-family, font-size, font-weight, text-align,cursor...
    상속안되는 속성
        background-color, background-image, background-repeat, border, display...
    속성별 상속 여부 정보는 아래 링크 참고 (inherited? 항목의 yes 부분이 상속되는 속성을 의미)
        https://www.w3.org/TR/CSS21/propidx.html        
    #공용키워드
        모든 CSS속성에 사용 가능한 키워드
        때문에 이를 전역값이라 표현하기도 함
            inherit : 상위 요소로부터 해당 속성의 값을 받아 사용
            initial : (브라우저에 지정되어 있는) 해당 속성의 기본값을 요소에 적용
            unset : 상속 속성에 대해서는 inherit처럼, 상속되지 않는 속성에 대해서는 initial처럼 적용

#z-index
    요소의 쌓임 순서(stack order)를 정의할수 있다.
    정수 값을 지정하여 쌓임 맥락(stacking context)에서의 레벨을 정의하는 방식으로 적용되며, 위치 지정 요소에대해 적용 가능
        위치 지정 요소란, position 속성이 정의되어 있는 요소를 말한다.
    기본값은 auto 이며, 정수값으로 정의한다.
    정수값은 쌓임 맥락에서의 레벨을 의미하며, 값이 클수록 전면에 표시된다.