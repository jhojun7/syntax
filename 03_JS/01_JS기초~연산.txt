자바스크립트의 역할은
    웹브라우저가 가진 기능을 실행시키거나
    HTML / CSS 를 통해 렌더링된 화면을 조작 할 수 있다.
즉, 자바스크립트는 웹브라우저를 조작함을로써 역할을 수행.

<script src="*.js"> </script>

#객체
    실세계에 존재하는 대상 또는 생각할 수 있는 어떤 개념.
    자바스크립트에게 객체란?
        어떤 사물이나 개념을 소프트웨어적으로 표현하기 위해 사용하는 문법수단.
        자바스크립트 코드 내에서 객체란 '값 또는 기능을 가지고 있는 데이터'이다.
    웹브라우저는 소프트웨어 세계에 존재하는 사물, 즉 객체이다.
    자바스크립트는 웹브라우저라는 객체에게 명령을 내리기 위해 사용하는 언어.
    대표적인 객체는 '윈도우'
    객체사용법
        뒤에 점을 찍으면 값 또는 기능을 사용할수 있다
        객체가 가진 기능을 '메소드'라고 한다.
            객체.데이터 : 객체가 가지고 있는 숫자, 문자 등의 다양한 데이터를 사용할 수 있다.
            객체.기능() : 객체가 가지고 있는 다양한 기능을 수행할 수 있다. (괄호 필수)
        /예시
            window.alert('hello!')
            * 윈도우의 알러트 기능을 이용하여 'hello!'  라는 경고창 띄우기

#주석
    // 한줄만 쓸수 있는 주석
    /* 영역내 모두가
        주석이 된다 */

#console
    브라우저의 디버킹 콘솔을 의미한다.
    콘솔은 브라우저 안에 내장된 브라우저의 하위 객체이므로 브라우저 객체를 통해 접근 할 수 있다.
    디버깅콘솔이란?
        웹브라우저의 '개밸자도구'를 열면 메뉴 중 '콘솔'이라는 항목이 존재하는데, 이것을 누르면 나타나는 화면이 디버깅콘솔이다.
    사용자 편의를 위해 window. 을 생략한 채로 코드를 작성할 수 있다.
    /예시
        console.log('고양이');
        * 콘솔화면에 '고양이'라는 기록.
        console.clear()
        * 콘솔화면 깔끔히 지우기

#자바스크립트 코드 작성 규칙
    대문자와 소문자를 잘 구분하여 작성한다.
    구문의 끝에는 세미콜론을 입력해 '구문의 끝'을 알릴 수 있다. 이는 선택사항이다.
    가능하면 한 줄에는 두 개 이상의 구문을 쓰지 않는다.

#변수
    '데이터에 붙이는 이름표'
    변수를 이용하면 이름표를 붙여 둔 데이터를 기억해두었다가 필요할 때 마다 재사용 할 수 있게 된다.
    변수 만드는 방법
        let 변수이름 = 데이터;
        * let 은 '변수를 만들겠다' 라는 의미로 쓰인다.
    변수가 생성되고 나면, 변수(변수이름)를 지정된 데이터 대신 사용 가능.
    
    변수를 만드는 작업을 '변수의 선언'이라고 부르고, 만들어진 변수에 첫 데이터를 지정하는 작업을 '변수의 초기화'라 부른다.
    두 과정은 동시에 진행할 수도, 따로 진행할 수도 있다.

    변수는 데이터를 기억하기 위해 사용한다.
    한 번에 하나의 데이터만 기억 할 수 있으며, 기억하고 있는 값을 바꿔가며 사용할 수 있다.

    /제약사항
        변수명에는 오직 문자와 숫자, 그리고 기호 $ _ 만이 포함될 수 있다.
        변수명의 첫번째 글자로 숫자가 올 수 없다.
        이미 다른 뜻을 가지고 있는 단어(키워드)는 변수명으로 사용할 수 없다.

    숫자는 정수와 실수
    문자열은 문자, 숫자, 특수문자 등 다양한 기호를 조합해 만들수 있는 '기호의 집합'

#상수
    '변하지 않는 값'
    변수와 반대되는 것으로, 상수는 단 하나의 데이터 만을 위해 사용하는 이름표로써 값의 변경이 불가
    상수 만드는 방법
        const 상수이름 = 데이터;
    상수도 변수처럼 지정된 데이터 대신 사용가능
    상수 이름 짓기 규칙은 변수와 동일

    상수를 만들 때는 선언과 동시에 초기화를 해주어야 한다. 그렇지 않으면 데이터를 지정할 수 없다. (한줄에 써야된다는 말)

#prompt 메소드
    윈도우 객체의 prompt(X) 메소드는 사용자로부터 문자열을 입력받을 수 있는 다이얼로그 박스를 열어주는 메소드.
    실행 시에 사용자로부터 문자열을 입력받고, 입력받은 문자열을 자신이 사영된 곳에 그래도 '반환'한다. 즉, 메소드가 문자열로 바뀌게 된다.
    /예시
        const data = prompt("프롬포트에 표시할 문자열");
        입력 창에 "입력한 값" 이라고 입력하면
        const data = "입력한 값" 과 같이 출력됨, 실제로 코드가 바뀌는건 아님.

#템플릿 리터럴
    탬플릿 리터럴은 백틱을 이용해 표현한다.
    /예시
        const str1 = `백팁`
    문자열 안에 표현식을 삽입할 수 있다.
    문자열의 내용에 데이터를 삽입한다는 의미
    템플릿 리터럴로 표현한 문자열 내부에 플레이스홀더(${})를 기입하고, 그 안에 데이터를 기입하면 데이터는 문자열의 멤버가 된다.
    /예시
        const data1 = 100
        const str1 = `숫자값 : ${data1}`
        console.log(str1)
        * 숫자값 : 100 이라고 콘솔에 찍힘
    /예시
        const str = `입력하세요 ${prompt('입력하세요')}`
        console.log(str)
        입력 창에 "입력한 값" 이라고 입력
        * 입력하세요 입력한 값
    /예시
        let age = 21;
        let ninkname = prompt("나의 별명은?")
        console.log(`내 별명은 ${ninkname}이고, 나이는 ${age}살이다.`)
        * 프로픔트에서 입력한 값이 닉네임에 들어가서 출력됨.

#연산
    '식이 나타낸 일정한 규칙에 따라 계산함'을 뜻한다.
    사용자는 자바스크립트 코드를 통해 연산을 처리하는 식을 만들 수 있고, 여기에 사용하는 기호를 '연산자'라고 한다

    산술연산 (산수)
    대입연산
        오른쪽 피연산자의 데이터를 왼쪽 피연산자에 대입
        왼쪽 피연산자로는 주로 변수나 상수가 자리하며, 오른쪽 피연산자로는 데이터 또는 데이터를 반환하는 식이 자리한다.
        a=b 대입하기 : 값 b를 변수 a에 대입
        a+=b 더하여 대입 : 변수a의 값에 b를 더한 결과를 a에 대입 (a값은 a에서 b를 더해라)

#null
    '없다' 를 의미하는 데이터
    의도적으로 데이터가 없음을 나타내기 위해 사용하는 일종의 표현 수단
#undefined
    아직 데이터가 정의되지 않았음
#boolean
    'true' 또는 'false' 두가지 값만 존재
    참과 거짓 여부를 나타내기 위해 사용하는 데이터
    소문자로 써야 함

#DOM
    브라우저는 HTML코드를 해석해서 요소들을 트리 형태로 구조화해 표현하는 문서(객체)를 생성한다. 이를 DOM이라고 하며,
    브라우저는 DOM을 통해 화면에 웹 콘텐츠들을 렌더링한다.
    DOM은 자바스크립트를 사용해서 웹 콘텐츠를 추가, 수정, 삭제하거나 마우스 클릭, 키보드 타이핑 등 이벤트에 대한 처리를 정의할 수 있도록
    제공되는 프로그래밍 인터페이스이다.

#window.document
    브라우저 객체 윈도우의 도큐먼트 속성은 창이 포함한 문서를 참조한다.
    즉, window.document은 현재 브라우저에 렌더링되고 있는 문서를 의미하며, 이 속성을 이용하면 해당 문서에 접근할 수 있다.
    window.document는 페이지 콘텐츠, 즉 DOM에 대한 진입점 역할을 하는 프로그래밍 인터페이스이다.
    이를 이용하면 페이지의 정보를 얻거나 웹 요소를 생성 및 조작할 수 있다.

    document는 문서에 대한 공통의 속성과 메소드를 제공한다.
    즉, 다양한 API(Application Programming Interface)를 제공한다.
        관련 문서 링크
            https://developer.mozilla.org/ko/docs/Web/API/Document
    #document.querySelector
        "선택자"를 인자로 전달받아, 전달받은 선택자와 일치하는 문서 내 첫번째 요소(Element)를 반환한다.
        일치하는 요소가 없으면 'null' 데이터를 반환
        인자로 전달되는 선택자는 문자열 타입의 '유효한 CSS 선택자'를 의미
    #document.getElementById
        "id"를 인자로 전달받아, 전달받은 선택자와 일치하는 문서 내 요소(Element)를 반환
        일치하는 요소가 없으면 'null' 데이터를 반환
        인자로 전달되는 선택자는 문자열 타입의 'id'를 의미
    #textContent 속성
        해당 노드가 포함하고 있는 텍스트 콘텐츠를 표현하는 속성.
        textContent를 통해 요소가 포함한 텍스트를 읽을수도, 변경할 수도 있다.
        /예시
            const p = document.querySelector("p");
            * p요소를 반환받아 상수로 이름을 붙인다.
            console.log(p.textContent)
            * p요소의 textContent 속성을 콘솔에 출력
            p.textContent = "텍스트를 바꿔"
            * p요소의 textContent값을 변경

#비교연산
    비교연산식은 언제나 boolean 데이터를 반환
    대소비교
    등가비교
        == 같다 , != 같지 않다
        === 완전히 같다 , !== 완전히 같지 않는다
            == 는 '추상적(abstract) 같음 비교'를 의미, 자료형이 서로 다르더라도 같다고 판단 할수 있는 비교
            === 는 '엄격한(strict) 같음 비교'를 의미, 자료형과 데이터가 모두 일치해야만 같다고 판단
        /예시
            console.log('1' == 1) // true
            console.log('1' === 1) // false